{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/Instructions/index.js","components/Cell/index.js","components/Board/index.js","components/Result/index.js","App.js","services/apiService.js","index.js"],"names":["Header","useState","isOpen","setIsOpen","Navbar","color","dark","expand","NavbarBrand","href","className","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","target","Footer","rel","Instructions","Jumbotron","Cell","props","onChange","e","state","isLetter","setState","value","toUpperCase","this","setTimeout","setFocus","onKeyPress","event","charCode","posX","posY","cell","focus","select","type","maxLength","ref","input","Component","Board","x","y","board","valid","isValid","updateBoard","onFocus","onClear","i","j","flat","join","trim","length","c00","c10","c20","c30","c01","c11","c21","c31","c02","c12","c22","c32","c03","c13","c23","c33","Button","size","onSolveClick","disabled","Result","Table","striped","data","sort","a","b","score","map","word","key","App","onBoardChange","letters","loading","async","url","options","method","headers","process","fetch","response","json","fetchWords","then","dataWithScores","d","calculateScore","totalScore","reduce","result","catch","console","log","Container","fluid","Row","Col","md","xs","Card","body","inverse","CardBody","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52f3ddfd.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from 'reactstrap';\n\nfunction Header() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <Navbar color=\"dark\" dark expand=\"md\">\n      <NavbarBrand href=\"/\" className=\"navbar-brand\">Boggle Solver</NavbarBrand>\n      <NavbarToggler onClick={toggle} />\n      <Collapse isOpen={isOpen} navbar>\n        <Nav className=\"mr-auto\" navbar></Nav>\n        <Nav>\n          <NavItem>\n            <NavLink href=\"https://github.com/alperg\" target=\"_blank\">Alper Gokcehan</NavLink>\n          </NavItem>\n        </Nav>\n      </Collapse>\n    </Navbar>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nfunction Footer() {\n  return (\n    <div className=\"footer\">\n      <span className=\"title\">Boggle Solver</span>\n      <span className=\"link\"><a href=\"https://github.com/alperg/boggle-solver\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/alperg/boggle-solver</a></span>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport { Jumbotron } from 'reactstrap';\n\nfunction Instructions() {\n  return (\n    <Jumbotron>\n      <h1 className=\"display-5\">A simple Boggle word game solver built with React and Bootstrap.</h1>\n      <hr className=\"my-2\" />\n      <p className=\"lead\">How to use the solver?</p>\n      <p>Type all the 16 letters in the text boxes with in the 4x4 board below, and click the \"Solve\" button. You will see the results shorthly right next to the board.</p>\n    </Jumbotron>\n  );\n}\n\nexport default Instructions;\n","import React, { Component } from 'react';\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: this.props.value || '',\n      posX: this.props.posX,\n      posY: this.props.posY,\n      isLetter: false\n    };\n  };\n\n  // Update state on input change\n  onChange = (e) => {\n    if(this.state.isLetter) {\n      this.setState({\n        value: e.target.value.toUpperCase()\n      }, function() {\n        if (this.props.onChange) {\n          this.props.onChange(this.state);\n        }\n      });\n    } else {\n      setTimeout(() => {\n        this.setFocus();\n      }, 10);\n    }\n  };\n\n  // Validate the letter, only allow uppercase and lowercase letters\n  onKeyPress = (event) =>  {\n    this.setState({\n      isLetter: (event.charCode >= 65 && event.charCode <= 90) || (event.charCode >= 97 && event.charCode <= 122)\n    });\n  }\n\n  // Set focus to this el when needed (from the parent)\n  setFocus() {\n    this.cell.focus();\n    this.cell.select();\n  }\n\n  render() {\n    return (\n      <div className=\"cell\">\n        <input\n          type=\"text\"\n          maxLength=\"1\"\n          value={this.state.value}\n          onKeyPress={this.onKeyPress}\n          onChange={this.onChange}\n          ref={(input) => { this.cell = input; }}\n        />\n      </div>\n    );\n  }   \n}\n\nexport default Cell;\n","import React, { Component } from 'react';\nimport { Button } from 'reactstrap';\n\nimport Cell from '../Cell';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    // x,y coordinates for the board\n    // ['0,0', '1,0', '2,0', '3,0']\n    // ['0,1', '1,1', '2,1', '3,1']\n    // ['0,2', '1,2', '2,2', '3,2']\n    // ['0,3', '1,3', '2,3', '3,3']\n\n    this.state = {\n      board: this.props.value || [\n        ['', '', '', ''],\n        ['', '', '', ''],\n        ['', '', '', ''],\n        ['', '', '', '']\n      ],\n      valid: this.isValid(this.props.value)\n    };\n  };\n\n  componentDidMount() {\n    // Set focus to the first cell on start\n    this.c00.setFocus();\n  }\n\n  onChange = (event) => {\n    const state = this.state;\n    let x = event.posX;\n    let y = event.posY;\n\n    state.board[y][x] = event.value;\n    state.valid = this.isValid(state.board);\n    this.updateBoard(state);\n\n    // console.log(`${y},${x}: ${this.state.board[y][x]}`);\n    \n    // Set focus on next control when typed a valid char\n    if (x < 3) {\n      // Set focus to the next cell on the right\n      x++;\n    }\n    else {\n      // Move down a row and move to the first cell\n      x = 0;\n\n      if (y < 3) {\n        y++;\n      }\n      else {\n        // Move back to top-left cell\n        y = 0;\n      }\n    }\n    \n    this['c' + x + y].setFocus();\n  }\n\n  // Select the element on focus for faster typing\n  onFocus = (event) => event.target.select();\n\n  // Clear all the cells\n  onClear = () => {\n    const board = [];\n    for(let i = 0; i < 4; i++) {\n      board[i] = [];\n      for(let j = 0; j < 4; j++) {\n        board[i][j] = '';\n        this['c' + i + j].state.value = '';\n      }\n    }\n    this.updateBoard({ board, valid: this.isValid(board) });\n  }\n\n  // Update board when necessary\n  updateBoard = (state) => {\n    this.setState(state, () => {\n      this.props.onChange(state.board);\n    });\n  }\n\n  // Check if the typed char is a valid char\n  isValid = (board) => {\n    return board.flat().join('').trim().length === 16;\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"board\">\n          <table>\n            <tbody>\n              <tr>\n                <td><Cell posX=\"0\" posY=\"0\" value={this.state.board[0][0]} onChange={this.onChange} onFocus={this.onFocus} ref={(input) => { this.c00 = input }}/></td>\n                <td><Cell posX=\"1\" posY=\"0\" value={this.state.board[0][1]} onChange={this.onChange} onFocus={this.onFocus} ref={(input) => { this.c10 = input }}/></td>\n                <td><Cell posX=\"2\" posY=\"0\" value={this.state.board[0][2]} onChange={this.onChange} onFocus={this.onFocus} ref={(input) => { this.c20 = input }}/></td>\n                <td><Cell posX=\"3\" posY=\"0\" value={this.state.board[0][3]} onChange={this.onChange} onFocus={this.onFocus} ref={(input) => { this.c30 = input }}/></td>\n              </tr>\n              <tr>\n                <td><Cell posX=\"0\" posY=\"1\" value={this.state.board[1][0]} onChange={this.onChange} onFocus={this.onFocus} ref={(input) => { this.c01 = input }}/></td>\n                <td><Cell posX=\"1\" posY=\"1\" value={this.state.board[1][1]} onChange={this.onChange} onFocus={this.onFocus} ref={(input) => { this.c11 = input }}/></td>\n                <td><Cell posX=\"2\" posY=\"1\" value={this.state.board[1][2]} onChange={this.onChange} onFocus={this.onFocus} ref={(input) => { this.c21 = input }}/></td>\n                <td><Cell posX=\"3\" posY=\"1\" value={this.state.board[1][3]} onChange={this.onChange} onFocus={this.onFocus} ref={(input) => { this.c31 = input }}/></td>\n              </tr>\n              <tr>\n                <td><Cell posX=\"0\" posY=\"2\" value={this.state.board[2][0]} onChange={this.onChange} onFocus={this.onFocus} ref={(input) => { this.c02 = input }}/></td>\n                <td><Cell posX=\"1\" posY=\"2\" value={this.state.board[2][1]} onChange={this.onChange} onFocus={this.onFocus} ref={(input) => { this.c12 = input }}/></td>\n                <td><Cell posX=\"2\" posY=\"2\" value={this.state.board[2][2]} onChange={this.onChange} onFocus={this.onFocus} ref={(input) => { this.c22 = input }}/></td>\n                <td><Cell posX=\"3\" posY=\"2\" value={this.state.board[2][3]} onChange={this.onChange} onFocus={this.onFocus} ref={(input) => { this.c32 = input }}/></td>\n              </tr>\n              <tr>\n                <td><Cell posX=\"0\" posY=\"3\" value={this.state.board[3][0]} onChange={this.onChange} onFocus={this.onFocus} ref={(input) => { this.c03 = input }}/></td>\n                <td><Cell posX=\"1\" posY=\"3\" value={this.state.board[3][1]} onChange={this.onChange} onFocus={this.onFocus} ref={(input) => { this.c13 = input }}/></td>\n                <td><Cell posX=\"2\" posY=\"3\" value={this.state.board[3][2]} onChange={this.onChange} onFocus={this.onFocus} ref={(input) => { this.c23 = input }}/></td>\n                <td><Cell posX=\"3\" posY=\"3\" value={this.state.board[3][3]} onChange={this.onChange} onFocus={this.onFocus} ref={(input) => { this.c33 = input }}/></td>\n              </tr>\n            </tbody>\n          </table>\n          <Button className=\"btn-clear\" color=\"warning\"size=\"lg\" onClick={()=> { this.onClear(); this.props.onClear(); }}>Clear</Button>\n          <Button className=\"btn-solve\" size=\"lg\" onClick={this.props.onSolveClick} disabled={!this.state.valid}>Solve</Button>\n        </div>\n        {/* TODO: Further improvement: Render the cells using grid */}\n        {/* <div className=\"board-grid\">\n          {\n            this.state.board.flat().map((cell, i) => (\n              <Cell key={i} posX=\"0\" posY=\"0\" value={this.state.board[0][0]} onChange={this.onChange} onFocus={this.onFocus} ref={(input) => { this.c00 = input }}/>\n            ))\n          }\n        </div> */}\n      </>\n    )\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport { Table } from 'reactstrap';\n\n// Show the words found with their scores\nfunction Result(props) {\n  return (\n    <div className=\"result\">\n      <Table striped>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>Word</th>\n            <th>Score</th>\n          </tr>\n        </thead>\n        <tbody>\n        {\n          props.data.sort(function(a, b) { return b.score - a.score; }).map(function(word, i) {\n            return (\n              <tr key={i}>\n                <td>{i + 1}</td>\n                <td>{word.word}</td>\n                <td>{word.score}</td>\n              </tr>\n            )\n          })\n        }\n        </tbody>\n      </Table>\n    </div>\n  )\n}\n\nexport default Result;\n","import React, { Component } from 'react';\nimport { Container, Row, Col, Card, CardBody } from 'reactstrap';\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Instructions from './components/Instructions';\nimport Board from './components/Board';\nimport Result from './components/Result';\n\nimport { fetchWords } from './services/apiService';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    // Represents the 4x4 board with 16 cells\n    this.state = {\n      board: [\n        ['R', 'H', 'R', 'E'],\n        ['Y', 'P', 'C', 'S'],\n        ['W', 'N', 'S', 'N'],\n        ['T', 'E', 'G', 'O']\n      ],\n      // Will be fetched from the API\n      result: [],\n      // Total score to be calculated based on the word lengths\n      totalScore: 0,\n      // To show the loading overlay\n      loading: false\n    };\n  };\n\n  // Update state when a value changes\n  onBoardChange = (board) => {\n    this.setState({ board });\n  };\n\n  // Fetch the words from the APIs and update the UI with the results\n  // TODO: Further improvement: Some of this logic can be moved to a utility service\n  onSolveClick = () => {\n    const letters = this.state.board.flat().join('');\n\n    this.setState({ loading: true });\n    fetchWords(letters).then((data) => {\n      if(data.length) {\n        const dataWithScores = data.map(d => {\n          return {\n            word: d,\n            score: this.calculateScore(d)\n          }\n        });\n\n        const totalScore = dataWithScores.reduce((a, b) => ({ score: a.score + b.score }));\n\n        this.setState({\n          result: dataWithScores,\n          loading: false,\n          totalScore: totalScore.score\n        });\n      } else {\n        this.setState({\n          loading: false\n        });\n      }\n    }).catch(console.log);\n  }\n\n  // Calculates score based on the work length\n  // TODO: Further improvement: This can be moved to a utility service\n  calculateScore = (word) => {\n    let score = 1;\n\n    if (word.length > 4) {\n      switch(word.length) {\n        case 5: score = 2; break;\n        case 6: score = 3; break;\n        case 7: score = 5; break;\n        default: score = 11; break;\n      };\n    }\n    return score;\n  }\n\n  // Clear the UI for the next round\n  onClear = () => {\n    this.setState({\n      result: [],\n      totalScore: 0\n    })\n  }\n\n  render() {\n    const { board, result, totalScore, loading } = this.state;\n\n    return (\n      <div className=\"boggle-solver\">\n        \n        <Header />\n\n        <Instructions />\n        \n        {\n          loading && (\n            <Container className=\"overlay\" fluid={true}>\n              <div className=\"spinner\">\n                <div className=\"double-bounce1\"></div>\n                <div className=\"double-bounce2\"></div>\n              </div>\n            </Container>\n          )\n        }\n\n        <Container className=\"content\" fluid={true}>\n          <Row>\n            <Col md=\"4\" xs=\"12\">\n              <Board value={board} onChange={this.onBoardChange} onSolveClick={this.onSolveClick} onClear={this.onClear} />\n            </Col>\n            <Col md=\"4\" xs=\"12\">\n              <Result data={result} />\n            </Col>\n            <Col md=\"4\" xs=\"12\">\n              <div className=\"score-wrapper\">\n                <Card body inverse  color=\"secondary\">\n                  <CardBody>\n                    <h1 className=\"display-5 words\">Words found: {result.length > 0 ? result.length : ''}</h1>\n                    <h1 className=\"display-5 score\">Total Score: {totalScore > 0 ? totalScore : ''}</h1>\n                  </CardBody>\n                </Card>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n\n        <Footer />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// Api Service\n\n// Fetched words from the Rapid API endpoint based on passed letters\n// Pass letters as string and the length should be 16\nexport async function fetchWords(letters) {\n  const url = `https://codebox-boggle-v1.p.rapidapi.com/${letters}`;\n  \n  const options = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-RapidAPI-Host': 'codebox-boggle-v1.p.rapidapi.com',\n      'X-RapidAPI-Key': process.env.REACT_APP_RAPIDAPI_KEY\n    }\n  };\n\n  const response = await fetch(url, options);\n\n  return await response.json();\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './assets/scss/style.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}